[
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/commitlint.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/eslint.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/playwright.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/react-router.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/migrate-add-requesterHash.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/migrate-file-to-pg.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/replace-catch-any.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/replace-catch-any2.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/replace-double-bang.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/replace-extract-error.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/scripts/replace-extract-error.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/auth/auth-google.server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/auth/auth.server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/auth/csrf.server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/components/MusicTableRow.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/components/ui/adminStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/components/ui/header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/components/ui/settings.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/env.server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/hooks/use-mobile.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/hooks/useFormErrors.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/hooks/usePlayingMusic.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/lib/socketClient.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/libs/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/root.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/only-throw-error",
        "severity": 2,
        "message": "Expected an error object to be thrown.",
        "line": 69,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "object",
        "endLine": 69,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/only-throw-error",
        "severity": 2,
        "message": "Expected an error object to be thrown.",
        "line": 132,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "object",
        "endLine": 132,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/action/set-theme.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/api/assets.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/api/music.add.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/api/music.remove.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 72,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "alwaysTruthy",
        "endLine": 72,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, the types have no overlap.",
        "line": 86,
        "column": 42,
        "nodeType": "BinaryExpression",
        "messageId": "noOverlapBooleanExpression",
        "endLine": 86,
        "endColumn": 55,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/api/settings.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, the types have no overlap.",
        "line": 14,
        "column": 35,
        "nodeType": "BinaryExpression",
        "messageId": "noOverlapBooleanExpression",
        "endLine": 14,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
        "line": 28,
        "column": 40,
        "nodeType": "MemberExpression",
        "messageId": "neverNullish",
        "endLine": 28,
        "endColumn": 49,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 60,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "alwaysTruthy",
        "endLine": 60,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/auth/google-callback.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/auth/login.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/auth/logout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/home.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/not-found.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/routes/time.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/sessions.server.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/app/stores/musicStore.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4797, 4800], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4797, 4800], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/music/components/FormAlert.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/music/components/HomeForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/music/components/YouTubeStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/music/components/useHomeForm.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/components/DateDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/components/ProgressBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/components/TimeDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/components/TimePageLayout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/components/countdown-display.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/components/schedule-table.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/hooks/use-class-schedule.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/hooks/use-client-only.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/stores/classScheduleStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/types/schedule.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/utils/holidays.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/utils/schedule-config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/schedule/utils/time-calculations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/components/BackgroundImageSettings.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/components/ContactInfo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/components/DarkModeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/components/ProgressBarSettings.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/components/SettingsButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/components/SettingsPanel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/hooks/use-progress-settings.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/stores/colorModeStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/features/settings/stores/progressSettingsStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/bootstrap.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/configureApp.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/di/container.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/handlers/getAllMusics.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/handlers/getRemoteStatus.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/handlers/music.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/handlers/testHelpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/logger.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
        "line": 68,
        "column": 5,
        "nodeType": "LogicalExpression",
        "messageId": "neverNullish",
        "endLine": 69,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/loggerMeta.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/music/musicRepository.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/music/musicService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/music/youtubeResolver.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/persistence/file.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/persistence/hybrid.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/persistence/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/persistence/pg.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/persistence/storeHelpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/persistence/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/services/cacheService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/services/configService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/services/errorService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/services/remoteStatusManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/services/retryService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/settingsPersistence.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
        "line": 79,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "neverNullish",
        "endLine": 79,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/connectionHandler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/cors.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is `never`.",
        "line": 18,
        "column": 72,
        "nodeType": "Identifier",
        "messageId": "never",
        "endLine": 18,
        "endColumn": 79,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "SERVER_ENV fields can be `never` in some build-time cfgs"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/createSocketIo.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/engine.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/factory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/handlers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/manager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/remoteStatus.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/runtime.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/socket/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/types/socketEvents.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/errorHandlers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/errorHandling.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/normalizeYoutubeMeta.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/safeEmit.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe spread of an `any` type.",
        "line": 81,
        "column": 37,
        "nodeType": "SpreadElement",
        "messageId": "unsafeSpread",
        "endLine": 81,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2819, 2822], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2819, 2822], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe spread of an `any` type.",
        "line": 116,
        "column": 41,
        "nodeType": "SpreadElement",
        "messageId": "unsafeSpread",
        "endLine": 116,
        "endColumn": 92,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 116,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 116,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4318, 4321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4318, 4321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe spread of an `any` type.",
        "line": 151,
        "column": 45,
        "nodeType": "SpreadElement",
        "messageId": "unsafeSpread",
        "endLine": 151,
        "endColumn": 96,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 151,
        "column": 92,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 151,
        "endColumn": 95,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5762, 5765], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5762, 5765], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/safeLogger.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/socketEmitter.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/socketHelpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/utils/windowCloseManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/server/youtubeService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/components/MusicTitleWithHover.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/components/StatusBadge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/components/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/hooks/use-mobile.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/libs/indexedDB.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/libs/youtube.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/libs/youtubeUrls.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/schemas/music.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/stores/adminStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/stores/settingsStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/types/progressSettings.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/types/server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/types/socket.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/api.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/apiUi.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/formAdapters/conformAdapter.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 23,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "alwaysTruthy",
        "endLine": 23,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/formatError.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/handle.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/httpResponse.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/result.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/time/background-utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/time/date-formatter.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/time/progress-utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/src/shared/utils/uiActionExecutor.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/apiUi.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/fixtures.conformance.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/getAllMusics.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/handlers.music.add.test.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [18, 54], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-assignment').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [52, 93], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-call').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [93, 128], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-member-access').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [128, 172], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-argument').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [172, 211], "text": "" }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 59,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 59,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/unbound-method */\nimport { describe, it, expect, vi } from \"vitest\";\nimport createMusicHandlers from \"../../src/server/handlers/music\";\nimport type { Music } from \"../../src/app/stores/musicStore\";\nimport { makeDeps, makeIo, makeYoutubeService, makeFileStore, getFormErrors } from \"./testDeps\";\n\ntype VideoOk = {\n    ok: true;\n    value: {\n        title: string;\n        channelTitle: string;\n        channelId: string;\n        duration: string;\n        isAgeRestricted: boolean;\n    };\n};\n\ndescribe(\"createMusicHandlers.addMusic\", () => {\n    it(\"normal path: adds, emits, persists\", async () => {\n        const youtubeService: {\n            getVideoDetails: (id: string) => Promise<VideoOk>;\n        } = {\n            getVideoDetails: (id: string) => {\n                void id;\n                return Promise.resolve({\n                    ok: true,\n                    value: {\n                        id: \"zjEMFuj23B4\",\n                        title: \"t\",\n                        channelTitle: \"c\",\n                        channelId: \"ch\",\n                        duration: \"00:00:10\",\n                        isAgeRestricted: false,\n                    },\n                });\n            },\n        };\n\n        const emitted: Array<{ ev: string; payload: unknown }> = [];\n        const io = makeIo((ev, payload) => {\n            void emitted.push({ ev, payload });\n        });\n\n        const fileStore = makeFileStore({ add: vi.fn() });\n\n        const musicDB = new Map<string, Music>();\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n\n        const res = await handlers.addMusic(\"https://youtu.be/zjEMFuj23B4\", \"reqh\");\n        expect(res).toEqual({});\n        expect(musicDB.size).toBe(1);\n        expect(fileStore.add).toHaveBeenCalled();\n        expect(emitted).toHaveLength(1);\n    });\n\n    it(\"duplicate returns formErrors\", async () => {\n        const youtubeService: {\n            getVideoDetails: (id: string) => Promise<unknown>;\n        } = {\n            // return a minimal, valid YouTube metadata object per shared schema\n            getVideoDetails: () =>\n                Promise.resolve({\n                    ok: true,\n                    value: {\n                        id: \"zjEMFuj23B4\",\n                        title: \"t\",\n                        channelTitle: \"c\",\n                        channelId: \"ch\",\n                        duration: \"PT0S\",\n                        isAgeRestricted: false,\n                    },\n                } as unknown),\n        };\n        const io = makeIo();\n        const fileStore = makeFileStore();\n        const musicDB = new Map<string, Music>();\n        musicDB.set(\"zjEMFuj23B4\", {\n            id: \"zjEMFuj23B4\",\n            title: \"\",\n            channelName: \"\",\n            channelId: \"\",\n            duration: \"\",\n        });\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n\n        const res = await handlers.addMusic(\"https://youtu.be/zjEMFuj23B4\", \"reqh\");\n        expect(getFormErrors(res)).toBeTruthy();\n    });\n\n    it(\"invalid url returns error\", async () => {\n        const youtubeService: {\n            getVideoDetails: (id: string) => Promise<unknown>;\n        } = {\n            // return a minimal, valid YouTube metadata object per shared schema\n            getVideoDetails: () =>\n                Promise.resolve({\n                    ok: true,\n                    value: {\n                        id: \"zjEMFuj23B4\",\n                        title: \"t\",\n                        channelTitle: \"c\",\n                        channelId: \"ch\",\n                        duration: \"PT0S\",\n                        isAgeRestricted: false,\n                    },\n                } as unknown),\n        };\n        const io = makeIo();\n        const fileStore = makeFileStore();\n        const musicDB = new Map<string, Music>();\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n\n        const res = await handlers.addMusic(\"not-a-url\", \"reqh\");\n        expect(getFormErrors(res)).toBeTruthy();\n    });\n\n    it(\"age restricted is rejected\", async () => {\n        const youtubeService: {\n            getVideoDetails: (id: string) => Promise<unknown>;\n        } = {\n            // age-restricted case — still provide required fields but mark restricted\n            getVideoDetails: () =>\n                Promise.resolve({\n                    ok: true,\n                    value: {\n                        id: \"zjEMFuj23B4\",\n                        title: \"t\",\n                        channelTitle: \"c\",\n                        channelId: \"ch\",\n                        duration: \"PT0S\",\n                        isAgeRestricted: true,\n                    },\n                }),\n        };\n        const io = makeIo();\n        const fileStore = makeFileStore();\n        const musicDB = new Map<string, Music>();\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n\n        const res = await handlers.addMusic(\"https://youtu.be/zjEMFuj23B4\", \"reqh\");\n        expect(getFormErrors(res)).toBeTruthy();\n    });\n\n    it(\"youtubeService error propagates message\", async () => {\n        const youtubeService: {\n            getVideoDetails: (id: string) => Promise<{ ok: false; error: string }>;\n        } = {\n            getVideoDetails: () => Promise.resolve({ ok: false, error: \"not found\" }),\n        };\n        const ioEmit = vi.fn();\n        // Wrap the mock in an arrow function to avoid unbound-method lint rule\n        // and discard the mock return value so we don't return `any`.\n        const io = makeIo((ev, payload) => {\n            void ioEmit(ev, payload);\n        });\n        const fileStore = makeFileStore({ add: vi.fn() });\n        const musicDB = new Map<string, Music>();\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n\n        const res = await handlers.addMusic(\"https://youtu.be/COll6PdtI5w\", \"reqh\");\n        const formErrors = getFormErrors(res);\n        expect(formErrors).toBeTruthy();\n        expect(formErrors && formErrors[0]).toContain(\"not found\");\n    });\n\n    it(\"fileStore returns promise and is awaited\", async () => {\n        const youtubeService: {\n            getVideoDetails: (id: string) => Promise<VideoOk | { ok: false; error: string }>;\n        } = {\n            getVideoDetails: (id: string) => {\n                void id;\n                return Promise.resolve({\n                    ok: true,\n                    value: {\n                        id: \"QXCvO3ajlnY\",\n                        title: \"t\",\n                        channelTitle: \"c\",\n                        channelId: \"ch\",\n                        duration: \"00:00:10\",\n                        isAgeRestricted: false,\n                    },\n                });\n            },\n        };\n        let persisted = false;\n        const fileStore: { add: (m: Music) => void | Promise<void> } = {\n            add: (m: Music) => {\n                void m;\n                return new Promise<void>((res) =>\n                    setTimeout(() => {\n                        persisted = true;\n                        res();\n                    }, 10)\n                );\n            },\n        };\n        const emitted: Array<{ ev: string; payload: unknown }> = [];\n        const io = makeIo((ev, payload) => {\n            void emitted.push({ ev, payload });\n        });\n        const musicDB = new Map<string, Music>();\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore: makeFileStore(fileStore),\n            })\n        );\n\n        const res = await handlers.addMusic(\"https://youtu.be/QXCvO3ajlnY\", \"reqh\");\n        expect(res).toEqual({});\n        expect(persisted).toBe(true);\n    });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/handlers.music.remove.permission.test.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [18, 54], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-assignment').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [52, 93], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-call').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [93, 128], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-member-access').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [128, 172], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-argument').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [172, 211], "text": "" }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 70,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 70,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 108,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 108,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/unbound-method */\nimport { describe, it, expect, vi } from \"vitest\";\nimport type { Music } from \"../../src/app/stores/musicStore\";\nimport createMusicHandlers from \"../../src/server/handlers/music\";\nimport { makeDeps, makeIo, makeYoutubeService, makeFileStore, makeSocket } from \"./testDeps\";\nimport { watchUrl, shortUrl } from \"../../src/shared/libs/youtube\";\n\ndescribe(\"removeMusic permissions\", () => {\n    it(\"anonymous item cannot be deleted by anyone\", () => {\n        const youtubeService = { getVideoDetails: vi.fn() };\n        const io = makeIo();\n        const fileStore = makeFileStore({ remove: vi.fn() });\n        const musicDB = new Map<string, Music>();\n        musicDB.set(\"anon\", {\n            id: \"anon\",\n            title: \"anon\",\n            channelId: \"c\",\n            channelName: \"cn\",\n            duration: \"PT0S\",\n            requesterHash: undefined,\n        });\n\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n        // register is synchronous; calling it with a fake socket is sufficient for this test\n        handlers.register(makeSocket({}), {});\n        const existing = musicDB.get(\"anon\");\n        expect(existing && existing.requesterHash).toBeUndefined();\n    });\n\n    it(\"owner can delete their own item\", () => {\n        const youtubeService2 = { getVideoDetails: vi.fn() };\n        const emitted2: Array<{ ev: string; payload: unknown }> = [];\n        const io2 = makeIo((ev, payload) => emitted2.push({ ev, payload }));\n        const fileStore2 = makeFileStore({ remove: vi.fn() });\n        const musicDB2 = new Map<string, Music>();\n        musicDB2.set(\"idowner0001\", {\n            id: \"idowner0001\",\n            title: \"t\",\n            channelId: \"c\",\n            channelName: \"cn\",\n            duration: \"PT1M\",\n            requesterHash: \"owner-hash\",\n        });\n\n        const handlers2 = createMusicHandlers(\n            makeDeps({\n                musicDB: musicDB2,\n                io: io2,\n                youtubeService: makeYoutubeService(youtubeService2),\n                fileStore: fileStore2,\n            })\n        );\n\n        const fakeSocket = {\n            on(_ev: \"removeMusic\", cb: (url: string, requesterHash?: string, cb?: (res: unknown) => void) => void) {\n                cb(watchUrl(\"idowner0001\"), \"owner-hash\", (res: unknown) => {\n                    expect(res).toEqual({});\n                });\n            },\n        };\n\n        handlers2.register(makeSocket(fakeSocket), {});\n        expect(fileStore2.remove).toHaveBeenCalledWith(\"idowner0001\");\n    });\n    it(\"admin can delete any item (requires server-side admin auth)\", () => {\n        const youtubeService3 = { getVideoDetails: vi.fn() };\n        const emitted3: Array<{ ev: string; payload: unknown }> = [];\n        const io3 = makeIo((ev, payload) => emitted3.push({ ev, payload }));\n        const fileStore3 = makeFileStore({ remove: vi.fn() });\n        const musicDB3 = new Map<string, Music>();\n        // use 11-char id\n        musicDB3.set(\"idadmin0001\", {\n            id: \"idadmin0001\",\n            title: \"t\",\n            channelId: \"c\",\n            channelName: \"cn\",\n            duration: \"PT1M\",\n            requesterHash: \"someone-hash\",\n        });\n\n        // pass isAdmin that returns true for our test admin hash\n        const handlers3 = createMusicHandlers(\n            makeDeps({\n                musicDB: musicDB3,\n                io: io3,\n                youtubeService: makeYoutubeService(youtubeService3),\n                fileStore: fileStore3,\n                isAdmin: (hash?: string) => hash === \"admin-hash\",\n            })\n        );\n\n        const fakeSocket3 = {\n            on(_ev: \"removeMusic\", cb: (url: string, requesterHash?: string, cb?: (res: unknown) => void) => void) {\n                cb(shortUrl(\"idadmin0001\"), \"admin-hash\", (res: unknown) => {\n                    expect(res).toEqual({});\n                });\n            },\n        };\n\n        handlers3.register(makeSocket(fakeSocket3), {});\n        expect(fileStore3.remove).toHaveBeenCalledWith(\"idadmin0001\");\n    });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/handlers.music.remove.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/handlers.music.test.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [18, 54], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-assignment').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [52, 93], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-call').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [93, 128], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-member-access').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [128, 172], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-argument').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [172, 211], "text": "" }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 44,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 44,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/unbound-method */\nimport { describe, it, expect, vi } from \"vitest\";\nimport type { Music } from \"../../src/app/stores/musicStore\";\nimport createMusicHandlers from \"../../src/server/handlers/music\";\nimport { makeDeps, makeIo, makeYoutubeService, makeFileStore } from \"./testDeps\";\n\ndescribe(\"music handlers\", () => {\n    it(\"addMusic success path calls youtubeService and fileStore and emits\", async () => {\n        const youtubeService = {\n            getVideoDetails: vi.fn().mockResolvedValue({\n                ok: true,\n                value: {\n                    id: \"zjEMFuj23B4\",\n                    title: \"t\",\n                    channelTitle: \"c\",\n                    channelId: \"ch\",\n                    duration: \"PT0M10S\",\n                    isAgeRestricted: false,\n                },\n            }),\n        };\n\n        const added: Array<{ ev: string; payload: unknown }> = [];\n        const io = makeIo((ev, payload) => {\n            added.push({ ev, payload });\n        });\n\n        const fileStore = makeFileStore({ add: vi.fn() });\n\n        const musicDB = new Map<string, Music>();\n\n        const handlers = createMusicHandlers(\n            makeDeps({\n                musicDB,\n                io,\n                youtubeService: makeYoutubeService(youtubeService),\n                fileStore,\n            })\n        );\n\n        const res = await handlers.addMusic(\"https://youtu.be/zjEMFuj23B4\", \"reqh\");\n        expect(res).toEqual({});\n        expect(musicDB.size).toBe(1);\n        expect(fileStore.add).toHaveBeenCalled();\n        expect(added).toHaveLength(1);\n    });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/manager.timers.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/modular-managers.test.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-assignment').",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [52, 93], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any' or '@typescript-eslint/no-unsafe-argument').",
        "line": 62,
        "column": 2,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2385, 2485], "text": " " }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `Map<string, any>` assigned to a parameter of type `Map<string, Music>`.",
        "line": 63,
        "column": 35,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 63,
        "endColumn": 73,
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2554, 2557], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2554, 2557], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument */\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport ConfigService from \"../../src/server/services/configService\";\nimport { SERVER_ENV } from \"../../src/app/env.server\";\nimport MusicRepository from \"../../src/server/music/musicRepository\";\nimport MusicService, { type EmitFn } from \"../../src/server/music/musicService\";\nimport { container } from \"../../src/server/di/container\";\nimport type { Store } from \"../../src/server/persistence/types\";\nimport type YouTubeResolver from \"../../src/server/music/youtubeResolver\";\nimport type { VideoMetaResult } from \"../../src/server/music/youtubeResolver\";\n\ntype Music = {\n\tid: string;\n\ttitle?: string;\n\tchannelId?: string;\n\tchannelName?: string;\n\tduration?: string;\n\trequesterHash?: string;\n};\n\ndescribe(\"新しいマネージャー統合テスト\", () => {\n\tbeforeEach(() => {\n\t\t// ensure container cleared between tests\n\t\tconst inst = (container as unknown as Record<string, unknown>)[\"instances\"] as { clear?: () => void } | undefined;\n\t\tif (inst && typeof inst.clear === \"function\") inst.clear();\n\t\tconst facts = (container as unknown as Record<string, unknown>)[\"factories\"] as { clear?: () => void } | undefined;\n\t\tif (facts && typeof facts.clear === \"function\") facts.clear();\n\t});\n\n\tafterEach(() => {\n\t\t// same cleanup\n\t\tconst inst = (container as unknown as Record<string, unknown>)[\"instances\"] as { clear?: () => void } | undefined;\n\t\tif (inst && typeof inst.clear === \"function\") inst.clear();\n\t\tconst facts = (container as unknown as Record<string, unknown>)[\"factories\"] as { clear?: () => void } | undefined;\n\t\tif (facts && typeof facts.clear === \"function\") facts.clear();\n\t});\n\n\tit(\"ConfigService の基本取得\", () => {\n\t\tconst cfg = new ConfigService();\n\t\tconst maybe = cfg.getString(\"NODE_ENV\" as keyof typeof SERVER_ENV, \"dev\");\n\t\texpect(typeof maybe === \"string\").toBe(true);\n\t});\n\n\tit(\"MusicRepository と MusicService の基本連携\", async () => {\n\t\tconst musicDB = new Map<string, Music>();\n\t\tconst fileStore: Store = {\n\t\t\tload() {\n\t\t\t\treturn [];\n\t\t\t},\n\t\t\tadd(_m: Music) {\n\t\t\t\treturn;\n\t\t\t},\n\t\t\tremove(_id: string) {\n\t\t\t\treturn;\n\t\t\t},\n\t\t\tclear() {\n\t\t\t\treturn;\n\t\t\t},\n\t\t} as unknown as Store;\n\n\t// MusicRepository expects the Music type from app stores; cast at callsite to avoid strict coupling in tests\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument\n\tconst repo = new MusicRepository(musicDB as unknown as Map<string, any>, fileStore);\n\t\tconst emitted: Array<{ ev: string; payload: unknown }> = [];\n\n\t\t// typed resolver stub matching minimal shape\n\t\tconst resolverStub: Pick<YouTubeResolver, \"resolve\"> = {\n\t\t\tresolve(u: string): Promise<VideoMetaResult> {\n\t\t\t\treturn Promise.resolve({ ok: true, value: { id: u } } as unknown as VideoMetaResult);\n\t\t\t},\n\t\t};\n\n\t\tconst typedEmit: EmitFn = (ev: string, payload: unknown) => {\n\t\t\temitted.push({ ev, payload });\n\t\t\treturn true;\n\t\t};\n\n\t\tconst svc = new MusicService(repo, resolverStub as unknown as YouTubeResolver, typedEmit);\n\t\t// add music via service\n\t\tconst res = await svc.addMusic(\"video123\") as { formErrors?: string[] };\n\t\texpect(res.formErrors).toBeUndefined();\n\n\t\t// remove music (simulate requester hash absent -> forbidden)\n\t\tconst rem = svc.removeMusic(\"video123\") as { formErrors?: string[] };\n\t\texpect(rem.formErrors).toBeDefined();\n\t});\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/musicService.add.failure.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [408, 411], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [408, 411], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [431, 434], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [431, 434], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any`.",
        "line": 19,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 19,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [906, 909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [906, 909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 22,
        "column": 21,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 22,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 22,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 22,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 28,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 28,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 31,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 31,
        "endColumn": 89,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1131, 1134], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1131, 1134], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any`.",
        "line": 31,
        "column": 45,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 31,
        "endColumn": 86,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 31,
        "column": 80,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 31,
        "endColumn": 82,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1215, 1218], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1215, 1218], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any`.",
        "line": 35,
        "column": 13,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 35,
        "endColumn": 65,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 35,
        "column": 42,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 35,
        "endColumn": 60,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .add on an `any` value.",
        "line": 35,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 35,
        "endColumn": 60,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'u' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 51,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 60,
        "column": 38,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 60,
        "endColumn": 49,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2168, 2171], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2168, 2171], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 60,
        "column": 51,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 60,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2185, 2188], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2185, 2188], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `EmitFn`.",
        "line": 60,
        "column": 68,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 60,
        "endColumn": 81,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 78,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 81,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2200, 2203], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2200, 2203], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/musicService.configPriority.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/musicService.emit.compat.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [770, 773], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [770, 773], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 19,
        "column": 21,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 19,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 19,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 19,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 25,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 25,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [932, 935], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [932, 935], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 28,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 28,
        "endColumn": 89,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1004, 1007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1004, 1007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any`.",
        "line": 28,
        "column": 45,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 28,
        "endColumn": 86,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 28,
        "column": 80,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 28,
        "endColumn": 82,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1083, 1086], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1083, 1086], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 50,
        "column": 38,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 50,
        "endColumn": 49,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1815, 1818], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1815, 1818], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 50,
        "column": 51,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 50,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1832, 1835], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1832, 1835], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 63,
        "column": 39,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 63,
        "endColumn": 62,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 72,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 76,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2826, 2829], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2826, 2829], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 81,
        "column": 22,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 81,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .emit on an `any` value.",
        "line": 81,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 81,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 95,
        "column": 38,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 95,
        "endColumn": 49,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3554, 3557], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3554, 3557], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 95,
        "column": 51,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 95,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3571, 3574], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3571, 3574], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .emit on an `any` value.",
        "line": 99,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 99,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/musicService.remove.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [493, 496], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [493, 496], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [540, 543], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [540, 543], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any`.",
        "line": 19,
        "column": 5,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 19,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [761, 764], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [761, 764], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 22,
        "column": 17,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 22,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 22,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 22,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 28,
        "column": 5,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 28,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 31,
        "column": 5,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 31,
        "endColumn": 85,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [958, 961], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [958, 961], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
        "message": "Unsafe return of a value of type `any`.",
        "line": 31,
        "column": 41,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 31,
        "endColumn": 82,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 31,
        "column": 76,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 31,
        "endColumn": 78,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1033, 1036], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1033, 1036], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 44,
        "column": 34,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 44,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1337, 1340], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1337, 1340], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 44,
        "column": 47,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 44,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1348, 1351], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1348, 1351], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `EmitFn`.",
        "line": 44,
        "column": 58,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 44,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1369, 1372], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1369, 1372], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 46,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "alwaysTruthy",
        "endLine": 46,
        "endColumn": 15,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1470, 1473], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1470, 1473], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .formErrors on an `any` value.",
        "line": 46,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 46,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 51,
        "column": 34,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 51,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1737, 1740], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1737, 1740], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 51,
        "column": 47,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 51,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1748, 1751], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1748, 1751], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `EmitFn`.",
        "line": 51,
        "column": 58,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 51,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1769, 1772], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1769, 1772], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 53,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "alwaysTruthy",
        "endLine": 53,
        "endColumn": 15,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1871, 1874], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1871, 1874], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .formErrors on an `any` value.",
        "line": 53,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 53,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 63,
        "column": 34,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 63,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2309, 2312], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2309, 2312], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 63,
        "column": 47,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 63,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2320, 2323], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2320, 2323], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `EmitFn`.",
        "line": 63,
        "column": 58,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 63,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2335, 2338], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2335, 2338], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2406, 2409], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2406, 2409], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .formErrors on an `any` value.",
        "line": 65,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 65,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `MusicRepository`.",
        "line": 79,
        "column": 34,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 79,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3076, 3079], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3076, 3079], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeResolver`.",
        "line": 79,
        "column": 47,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 79,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3087, 3090], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3087, 3090], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `EmitFn`.",
        "line": 79,
        "column": 58,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 79,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3102, 3105], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3102, 3105], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3176, 3179], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3176, 3179], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .formErrors on an `any` value.",
        "line": 81,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 81,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/normalizeYoutubeMeta.extended.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/normalizeYoutubeMeta.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/persistence.file.retry.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 32,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 38,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [1110, 1110], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [1110, 1110], "text": "await " },
            "desc": "Add await operator."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/persistence.file.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 21,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 27,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [627, 627], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [627, 627], "text": "await " },
            "desc": "Add await operator."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/persistence.hybrid.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 30,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 36,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [1190, 1190], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [1190, 1190], "text": "await " },
            "desc": "Add await operator."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 37,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 37,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [1357, 1357], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [1357, 1357], "text": "await " },
            "desc": "Add await operator."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/remoteStatus.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/safeEmit.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [722, 725], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [722, 725], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 27,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 27,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 38,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 38,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .mockImplementation on an `any` value.",
        "line": 38,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 38,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 106,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 106,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .mockImplementation on an `any` value.",
        "line": 106,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 106,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 179,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 179,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .mockImplementation on an `any` value.",
        "line": 179,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 179,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 199,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 199,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 209,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 209,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .mockImplementation on an `any` value.",
        "line": 209,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 209,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 225,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 225,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 233,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 233,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .mockImplementation on an `any` value.",
        "line": 233,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 233,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 249,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 249,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 257,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 257,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .mockImplementation on an `any` value.",
        "line": 257,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 257,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/server.api.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 126,
        "column": 17,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 126,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 128,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 128,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 129,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 129,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 131,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 131,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 156,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 156,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 184,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 184,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 185,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 185,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 186,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 186,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 189,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 189,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 190,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 190,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 191,
        "column": 25,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 191,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 212,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 212,
        "endColumn": 81,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 213,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 213,
        "endColumn": 98,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 214,
        "column": 21,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 214,
        "endColumn": 92,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 216,
        "column": 17,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 216,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/server.console-wrapper.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 89,
        "column": 17,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 89,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 103,
        "column": 17,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 103,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 140,
        "column": 17,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 140,
        "endColumn": 63,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/server.graceful-shutdown.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Server' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 16,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'express' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 15,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 56,
        "column": 31,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 56,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'code' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 57,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 145,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 145,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 165,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 165,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [5399, 5399], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [5399, 5399], "text": "await " },
            "desc": "Add await operator."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 170,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 170,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 190,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 190,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 209,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 209,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/server.startup.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'vi' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise returned in function argument where a void return was expected.",
        "line": 78,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "voidReturnArgument",
        "endLine": 78,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 97,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "alwaysTruthy",
        "endLine": 97,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 100,
        "column": 29,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 100,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 101,
        "column": 33,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 101,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [3847, 3847], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/socket.factory.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 17,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 17,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [522, 525], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [522, 525], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .setTimeout on an `any` value.",
        "line": 17,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 17,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 30,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 30,
        "endColumn": 53,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-condition",
        "severity": 1,
        "message": "Unnecessary conditional, value is always truthy.",
        "line": 33,
        "column": 37,
        "nodeType": "MemberExpression",
        "messageId": "alwaysTruthy",
        "endLine": 33,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 34,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 34,
        "endColumn": 53,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1564, 1567], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1564, 1567], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .__mockIo_listeners on an `any` value.",
        "line": 39,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 39,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1628, 1631], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1628, 1631], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .__mockIo on an `any` value.",
        "line": 40,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 40,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'server' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 41,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'socket' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 46,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2030, 2033], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2030, 2033], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .__fakeHandler on an `any` value.",
        "line": 47,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 47,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 68,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 68,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3025, 3028], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3025, 3028], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .__mockIo_listeners on an `any` value.",
        "line": 69,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 69,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .__mockIo_listeners on an `any` value.",
        "line": 70,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 70,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/socketEmitter.extra.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 17,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 17,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/unbound-method",
        "severity": 2,
        "message": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
        "line": 32,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unboundWithoutThisAnnotation",
        "endLine": 32,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/socketRuntime.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `() => Server<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any>`.",
        "line": 84,
        "column": 13,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 84,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 84,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 84,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4008, 4011], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4008, 4011], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 101,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 101,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 101,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 101,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4597, 4600], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4597, 4600], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 102,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 102,
        "endColumn": 69,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4667, 4670], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4667, 4670], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 103,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 103,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4741, 4744], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4741, 4744], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 104,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 104,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4787, 4790], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4787, 4790], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `() => Server<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any>`.",
        "line": 107,
        "column": 13,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 107,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4860, 4863], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4860, 4863], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `Map<any, any>` assigned to a parameter of type `Map<string, Music>`.",
        "line": 108,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 108,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeService`.",
        "line": 109,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 109,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `Store`.",
        "line": 110,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 110,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `TimerManager`.",
        "line": 111,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 111,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `WindowCloseManager`.",
        "line": 112,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 112,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 117,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 117,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 117,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 117,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5208, 5211], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5208, 5211], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .update on an `any` value.",
        "line": 117,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 117,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/socketRuntime.timers.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 24,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 24,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1096, 1099], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1096, 1099], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 25,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 25,
        "endColumn": 69,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1166, 1169], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1166, 1169], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 26,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 26,
        "endColumn": 70,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1237, 1240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1237, 1240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 27,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 27,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1283, 1286], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1283, 1286], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `() => Server<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any>`.",
        "line": 30,
        "column": 13,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 30,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1356, 1359], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1356, 1359], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `Map<any, any>` assigned to a parameter of type `Map<string, Music>`.",
        "line": 31,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 31,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeService`.",
        "line": 32,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 32,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `Store`.",
        "line": 33,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 33,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `TimerManager`.",
        "line": 34,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 34,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `WindowCloseManager`.",
        "line": 35,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 35,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 41,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 41,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1771, 1774], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1771, 1774], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .update on an `any` value.",
        "line": 41,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 41,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 43,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 43,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1897, 1900], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1897, 1900], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .update on an `any` value.",
        "line": 43,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 43,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `{}`.",
        "line": 45,
        "column": 28,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 45,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .timers on an `any` value.",
        "line": 45,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 45,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 47,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 47,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .timers on an `any` value.",
        "line": 47,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 47,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 55,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 55,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2474, 2477], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2474, 2477], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 56,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 56,
        "endColumn": 69,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2544, 2547], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2544, 2547], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 57,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 57,
        "endColumn": 70,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 57,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 57,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2615, 2618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2615, 2618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 1,
        "message": "Unsafe assignment of an `any` value.",
        "line": 58,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 58,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2661, 2664], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2661, 2664], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `() => Server<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any>`.",
        "line": 61,
        "column": 13,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 61,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 61,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 61,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2734, 2737], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2734, 2737], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `Map<any, any>` assigned to a parameter of type `Map<string, Music>`.",
        "line": 62,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 62,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `YouTubeService`.",
        "line": 63,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 63,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `Store`.",
        "line": 64,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 64,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `TimerManager`.",
        "line": 65,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 65,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `WindowCloseManager`.",
        "line": 66,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 66,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 71,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 71,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3034, 3037], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3034, 3037], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .update on an `any` value.",
        "line": 71,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 71,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 1,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `{}`.",
        "line": 73,
        "column": 28,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 73,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .timers on an `any` value.",
        "line": 73,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 73,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 1,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 74,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 74,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 1,
        "message": "Unsafe member access .timers on an `any` value.",
        "line": 74,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 74,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/testDeps.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/tests/unit/timerManager.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/sakana/Desktop/music-auto-play/vite.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
